// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Survey {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sections  SurveySection[]
  responses SurveyResponse[]

  @@map("surveys")
}

model SurveySection {
  id           String  @id @default(uuid())
  surveyId     String  @map("survey_id")
  sectionOrder Int     @map("section_order")
  path         String?
  title        String
  description  String?
  createdAt    DateTime @default(now())

  survey    Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  questions SurveyQuestion[]

  @@map("survey_sections")
}

model SurveyQuestion {
  id            String  @id @default(uuid())
  sectionId     String  @map("section_id")
  questionOrder Int     @map("question_order")
  question      String
  type          String
  required      Boolean @default(false)
  placeholder   String?
  createdAt     DateTime @default(now())

  section SurveySection             @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  options SurveyQuestionOption[]
  answers SurveyAnswer[]

  @@map("survey_questions")
}

model SurveyQuestionOption {
  id          String  @id @default(uuid())
  questionId  String  @map("question_id")
  optionOrder Int     @map("option_order")
  label       String
  value       String
  path        String?
  createdAt   DateTime @default(now())

  question       SurveyQuestion        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerOptions  SurveyAnswerOption[]

  @@map("survey_question_options")
}

model SurveyResponse {
  id          String    @id @default(uuid())
  surveyId    String    @map("survey_id")
  userId      String?   @map("user_id")
  sessionId   String?   @map("session_id")
  startedAt   DateTime  @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now())

  survey  Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers SurveyAnswer[]

  @@map("survey_responses")
}

model SurveyAnswer {
  id         String   @id @default(uuid())
  responseId String   @map("response_id")
  questionId String   @map("question_id")
  answerText String?  @map("answer_text")
  createdAt  DateTime @default(now())

  response        SurveyResponse       @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question        SurveyQuestion       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptions SurveyAnswerOption[]

  @@map("survey_answers")
}

model SurveyAnswerOption {
  id        String   @id @default(uuid())
  answerId  String   @map("answer_id")
  optionId  String   @map("option_id")
  createdAt DateTime @default(now())

  answer SurveyAnswer         @relation(fields: [answerId], references: [id], onDelete: Cascade)
  option SurveyQuestionOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("survey_answer_options")
}

// Live Polls Models
model Poll {
  id              String    @id @default(uuid())
  title           String
  description     String?
  code            String    @unique @default(cuid()) // Short code for sharing
  isActive        Boolean   @default(true) @map("is_active")
  allowMultiple   Boolean   @default(false) @map("allow_multiple") // Allow multiple votes per session
  showResults     Boolean   @default(true) @map("show_results") // Show results to voters
  resultsDelay    Int       @default(0) @map("results_delay") // Delay in seconds before showing results
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  closedAt        DateTime? @map("closed_at")

  questions PollQuestion[]
  sessions  PollSession[]

  @@index([code])
  @@map("polls")
}

model PollQuestion {
  id            String  @id @default(uuid())
  pollId        String  @map("poll_id")
  questionOrder Int     @map("question_order")
  question      String
  type          String  @default("single") // single, multiple
  maxSelections Int?    @map("max_selections") // For multiple choice
  createdAt     DateTime @default(now())

  poll    Poll         @relation(fields: [pollId], references: [id], onDelete: Cascade)
  options PollOption[]
  votes   PollVote[]

  @@map("poll_questions")
}

model PollOption {
  id          String   @id @default(uuid())
  questionId  String   @map("question_id")
  optionOrder Int      @map("option_order")
  label       String
  value       String
  color       String?  // For visual representation
  emoji       String?  // Optional emoji for the option
  createdAt   DateTime @default(now())

  question PollQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes    PollVote[]

  @@map("poll_options")
}

model PollVote {
  id         String   @id @default(uuid())
  sessionId  String   @map("session_id")
  questionId String   @map("question_id")
  optionId   String   @map("option_id")
  createdAt  DateTime @default(now())

  session  PollSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question PollQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   PollOption   @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, questionId, optionId]) // Prevent duplicate votes
  @@index([questionId])
  @@index([optionId])
  @@map("poll_votes")
}

model PollSession {
  id         String   @id @default(uuid())
  pollId     String   @map("poll_id")
  sessionId  String   @map("session_id") // Browser session ID
  userId     String?  @map("user_id") // Optional if user is logged in
  userAgent  String?  @map("user_agent")
  ipHash     String?  @map("ip_hash") // Hashed IP for fraud prevention
  createdAt  DateTime @default(now())

  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]

  @@unique([pollId, sessionId])
  @@index([pollId])
  @@map("poll_sessions")
}

// Guestbook Models
model GuestbookEntry {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  message   String?  @db.Text
  mood      String?  @db.Text // The mood/style description used for AI generation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket GuestbookTicket?

  @@index([userId])
  @@index([createdAt])
  @@map("guestbook_entries")
}

model GuestbookTicket {
  id              String   @id @default(uuid())
  ticketNumber    String   @unique @map("ticket_number") // Format: C-000000
  entryId         String   @unique @map("entry_id")
  userId          String   @map("user_id")
  userName        String   @map("user_name")
  userEmail       String   @map("user_email")
  userAvatar      String?  @map("user_avatar")
  userProvider    String   @map("user_provider") // github or google
  primaryColor    String   @map("primary_color") // Gradient start color
  secondaryColor  String   @map("secondary_color") // Gradient end color
  accentColor     String   @map("accent_color") // Accent color
  backgroundColor String   @map("background_color") // Card background
  createdAt       DateTime @default(now())

  entry GuestbookEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([ticketNumber])
  @@index([userId])
  @@index([createdAt])
  @@map("guestbook_tickets")
}

// Events Models
model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  qrCode      String   @unique @default(cuid()) // Short QR code for scanning
  isActive    Boolean  @default(true) @map("is_active")
  maxImages   Int      @default(15) @map("max_images") // Maximum images per user
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  endsAt      DateTime? @map("ends_at")

  images EventImage[]

  @@index([qrCode])
  @@map("events")
}

model EventImage {
  id        String   @id @default(uuid())
  eventId   String   @map("event_id")
  userId    String   @map("user_id")
  imageUrl  String   @map("image_url")
  caption   String?
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@index([createdAt])
  @@map("event_images")
}
